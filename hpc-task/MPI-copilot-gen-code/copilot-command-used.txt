Create a distributed memory implementation of the given OpenMP code, we are using 250 million trapezoids with the trapezoidal rule in this case and so it should be optimised with this scale in mind. The implementation should use MPI to distribute work across multiple processors. The existing optimised serial/OpenMP version of the code consists of the following features for performance optimisation: rolling endpoint calculations, local scalar accumulators, arithmetic optimisations and vectorisation efficiency which were implemented to improve the performance of the existing code and should be considered in this implementation. Clearly implement domain decomposition by evenly dividing the integration domain among MPI ranks. Use standard MPI collective communication routines that are beneficial to this implementation. Add clear comments on MPI-specific sections of the generated code for readability and verification of the implementation as well as for directives for me to improve, evaluate & assess the code myself.